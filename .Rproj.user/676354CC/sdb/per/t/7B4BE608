{
    "contents" : "## Step 1: Load the required library.\nlibrary(dplyr) #dplyr R 3.1.3\n\n## Step 2: Download and unzip the data file in the current directory. \ncurrentPath<- getwd()\ndownload.file(\"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip\",destfile = 'temp.zip', method = \"curl\")\nunzip('temp.zip')\n\n## Step 3: Read the data and prepare the data frames.\nactivitylabels<- read.table(paste(currentPath,'/UCI HAR Dataset','/activity_labels.txt', sep = ''))\nfeatures<- as.character(read.table(paste(currentPath,'/UCI HAR Dataset','/features.txt', sep = ''))[,2])\n\n## Step 4: Extract only the mean and standard deviation measurements\n# 4a: Start by loading the two datasets\nX_train <- read.table(paste(currentPath,'/UCI HAR Dataset','/train','/X_train.txt', sep = ''))\ncolnames(X_train)<-features\nX_train$labels  <- as.numeric(unlist((read.table(paste(currentPath,'/UCI HAR Dataset','/train','/y_train.txt', sep = '')))))\nX_train$subjectID <- as.numeric(unlist(read.table(paste(currentPath,'/UCI HAR Dataset','/train','/subject_train.txt', sep = ''))))\nX_train$prepost <-0 #0: train\n\nX_test <- read.table(paste(currentPath,'/UCI HAR Dataset','/test','/X_test.txt', sep = ''))\ncolnames(X_test)<-features\nX_test$labels<- as.numeric(unlist(read.table(paste(currentPath,'/UCI HAR Dataset','/test','/y_test.txt', sep = ''))))\nX_test$subjectID <- as.numeric(unlist(read.table(paste(currentPath,'/UCI HAR Dataset','/test','/subject_test.txt', sep = ''))))\nX_test$prepost <-1 #0: train\n\n#4b: Now extract the mean and std dependent variables (along with some identifier variables)\n# The following two lines do the same as: columns2 = c(\"tBodyAcc-mean()-X\", \"tBodyAcc-mean()-Y\" , \"tBodyAcc-mean()-Z\", \"tBodyAcc-std()-X\" , \"tBodyAcc-std()-Y\", \"tBodyAcc-std()-Z\" , \"tGravityAcc-mean()-X\",\"tGravityAcc-mean()-Y\", \"tGravityAcc-mean()-Z\", \"tGravityAcc-std()-X\" , \"tGravityAcc-std()-Y\", \"tGravityAcc-std()-Z\" ,\"tBodyAccJerk-mean()-X\" ,\"tBodyAccJerk-mean()-Y\" , \"tBodyAccJerk-mean()-Z\", \"tBodyAccJerk-std()-X\" ,\"tBodyAccJerk-std()-Y\", \"tBodyAccJerk-std()-Z\" ,\"tBodyGyro-mean()-X\" ,\"tBodyGyro-mean()-Y\" ,\"tBodyGyro-mean()-Z\", \"tBodyGyro-std()-X\" ,\"tBodyGyro-std()-Y\",\"tBodyGyro-std()-Z\" ,\"tBodyGyroJerk-mean()-X\", \"tBodyGyroJerk-mean()-Y\", \"tBodyGyroJerk-mean()-Z\", \"tBodyGyroJerk-std()-X\" ,\"tBodyGyroJerk-std()-Y\" ,\"tBodyGyroJerk-std()-Z\" ,\"tBodyAccMag-mean()\", \"tBodyAccMag-std()\" ,\"tGravityAccMag-mean()\" ,\"tGravityAccMag-std()\" ,\"tBodyAccJerkMag-mean()\", \"tBodyAccJerkMag-std()\", \"tBodyGyroMag-mean()\" ,\"tBodyGyroMag-std()\" ,\"tBodyGyroJerkMag-mean()\" ,\"tBodyGyroJerkMag-std()\" , \"fBodyAcc-mean()-X\" ,\"fBodyAcc-mean()-Y\", \"fBodyAcc-mean()-Z\" ,\"fBodyAcc-std()-X\", \"fBodyAcc-std()-Y\" ,\"fBodyAcc-std()-Z\" , \"fBodyAcc-meanFreq()-X\" , \"fBodyAcc-meanFreq()-Y\" ,\"fBodyAcc-meanFreq()-Z\" ,\"fBodyAccJerk-mean()-X\", \"fBodyAccJerk-mean()-Y\" ,\"fBodyAccJerk-mean()-Z\",\"fBodyAccJerk-std()-X\",\"fBodyAccJerk-std()-Y\", \"fBodyAccJerk-std()-Z\" , \"fBodyAccJerk-meanFreq()-X\" , \"fBodyAccJerk-meanFreq()-Y\" , \"fBodyAccJerk-meanFreq()-Z\" , \"fBodyGyro-mean()-X\" , \"fBodyGyro-mean()-Y\" , \"fBodyGyro-mean()-Z\" , \"fBodyGyro-std()-X\" , \"fBodyGyro-std()-Y\" , \"fBodyGyro-std()-Z\" ,  \"fBodyGyro-meanFreq()-X\" , \"fBodyGyro-meanFreq()-Y\" , \"fBodyGyro-meanFreq()-Z\" ,\"fBodyAccMag-mean()\", \"fBodyAccMag-std()\" ,\"fBodyAccMag-meanFreq()\" , \"fBodyBodyAccJerkMag-meanFreq()\" ,\"fBodyBodyGyroMag-mean()\" , \"fBodyBodyGyroMag-std()\" ,\"fBodyBodyGyroJerkMag-mean()\" ,\"fBodyBodyGyroJerkMag-std()\" , \"labels\" ,\"subjectID\" ,\"prepost\" )\nvarColumns = names(X_train)[grepl('mean', names(X_train))|grepl('Mean', names(X_train))|grepl('std', names(X_train))] \nX_train <- X_train[c(varColumns, c('labels', 'subjectID', 'prepost'))]  \nX_test<-X_test[c(varColumns, c('labels', 'subjectID', 'prepost'))]\n\n## Step 5: Merges the training and the test set horizontally [they are sorted appropriately]. In the previous step, an identifier variable tags them to their appropriate condition \ndataset<- rbind(X_train, X_test)\n\n## Step 6: Uses descriptive activity names to name the activities in the data set\ndataset$labels =  activitylabels$V2[dataset$labels]\n\n##Step 7: Appropriately labels the data set with descriptive variable names.\n#Note: When I first did this, I expected it to be much less time costly. I would not recommend it and suggest a string replacement strategy!\nnames(dataset)[1] <-paste('timeBodyAccelerationXMean')\nnames(dataset)[2] <-paste('timeBodyAccelerationYMean')\nnames(dataset)[3] <-paste('timeBodyAccelerationZMean')\n\nnames(dataset)[4] <-paste('timeBodyAccelerationXStd')\nnames(dataset)[5] <-paste('timeBodyAccelerationYStd')\nnames(dataset)[6] <-paste('timeBodyAccelerationZStd')\n\nnames(dataset)[7] <-paste('timeGravityAccelerationXMean')\nnames(dataset)[8] <-paste('timeGravityAccelerationYMean')\nnames(dataset)[9] <-paste('timeGravityAccelerationZMean')\n\nnames(dataset)[10] <-paste('timeGravityAccelerationXStd')\nnames(dataset)[11] <-paste('timeGravityAccelerationYStd')\nnames(dataset)[12] <-paste('timeGravityAccelerationZStd')\n\nnames(dataset)[13] <-paste('timeBodyAccelerationJerkXMean')\nnames(dataset)[14] <-paste('timeBodyAccelerationJerkYMean')\nnames(dataset)[15] <-paste('timeBodyAccelerationJerkZMean')\n\nnames(dataset)[16] <-paste('timeBodyAccelerationJerkXStd')\nnames(dataset)[17] <-paste('timeBodyAccelerationJerkYStd')\nnames(dataset)[18] <-paste('timeBodyAccelerationJerkZStd')\n\nnames(dataset)[19] <-paste('timeBodyGyroXMean')\nnames(dataset)[20] <-paste('timeBodyGyroYMean')\nnames(dataset)[21] <-paste('timeBodyGyroZMean')\n\nnames(dataset)[22] <-paste('timeBodyGyroXStd')\nnames(dataset)[23] <-paste('timeBodyGyroYStd')\nnames(dataset)[24] <-paste('timeBodyGyroZStd')\n\nnames(dataset)[25] <-paste('timeBodyGyroJerkXMean')\nnames(dataset)[26] <-paste('timeBodyGyroJerkYMean')\nnames(dataset)[27] <-paste('timeBodyGyroJerkZMean')\n\nnames(dataset)[28] <-paste('timeBodyGyroJerkXStd')\nnames(dataset)[29] <-paste('timeBodyGyroJerkYStd')\nnames(dataset)[30] <-paste('timeBodyGyroJerkZStd')\n\n\n## \nnames(dataset)[31] <-paste('timeBodyAccelerationMagnitudeMean')\nnames(dataset)[32] <-paste('timeBodyAccelerationMagnitudeStd')\n\nnames(dataset)[33] <-paste('timeGravityAccelerationMagnitudeMean')\nnames(dataset)[34] <-paste('timeGravityAccelerationMagnitudeStd')\n\nnames(dataset)[35] <-paste('timeBodyAccelerationJerkMagnitudeMean')\nnames(dataset)[36] <-paste('timeBodyAccelerationJerkMagnitudeStd')\n\nnames(dataset)[37] <-paste('timeBodyGyroMagnitudeMean')\nnames(dataset)[38] <-paste('timeBodyGyroMagnitudeStd')\n\nnames(dataset)[39] <-paste('timeBodyGyroJerkMagnitudeMean')\nnames(dataset)[40] <-paste('timeBodyGyroJerkMagnitudeStd')\n\nnames(dataset)[41] <-paste('forceBodyAccelerationXMean')\nnames(dataset)[42] <-paste('forceBodyAccelerationYMean')\nnames(dataset)[43] <-paste('forceBodyAccelerationZMean')\n\nnames(dataset)[44] <-paste('forceBodyAccelerationXStd')\nnames(dataset)[45] <-paste('forceBodyAccelerationYStd')\nnames(dataset)[46] <-paste('forceBodyAccelerationZStd')\n\nnames(dataset)[47] <-paste('forceBodyAccelerationXMeanFrequency')\nnames(dataset)[48] <-paste('forceBodyAccelerationYMeanFrequency')\nnames(dataset)[49] <-paste('forceBodyAccelerationZMeanFrequency')\n\nnames(dataset)[50] <-paste('forceBodyAccelerationJerkXMean')\nnames(dataset)[51] <-paste('forceBodyAccelerationJerkYMean')\nnames(dataset)[52] <-paste('forceBodyAccelerationJerkZMean')\n\n\nnames(dataset)[53] <-paste('forceBodyAccelerationJerkXStd')\nnames(dataset)[54] <-paste('forceBodyAccelerationJerkYStd')\nnames(dataset)[55] <-paste('forceBodyAccelerationJerkZStd')\n\nnames(dataset)[56] <-paste('forceBodyAccelerationJerkXMeanFrequency')\nnames(dataset)[57] <-paste('forceBodyAccelerationJerkYMeanFrequency')\nnames(dataset)[58] <-paste('forceBodyAccelerationJerkZMeanFrequency')\n\n\nnames(dataset)[59] <-paste('forceBodyGyroXMean')\nnames(dataset)[60] <-paste('forceBodyGyroYMean')\nnames(dataset)[61] <-paste('forceBodyGyroZMean')\n\nnames(dataset)[62] <-paste('forceBodyGyroXStd')\nnames(dataset)[63] <-paste('forceBodyGyroYStd')\nnames(dataset)[64] <-paste('forceBodyGyroZStd')\n\n\nnames(dataset)[65] <-paste('forceBodyGyroXMeanFrequency')\nnames(dataset)[66] <-paste('forceBodyGyroYMeanFrequency')\nnames(dataset)[67] <-paste('forceBodyGyroZMeanFrequency')\n\n\nnames(dataset)[68] <-paste('forceBodyAccelerationMagnitudeMean')\nnames(dataset)[69] <-paste('forceBodyAccelerationMagnitudeStd')\nnames(dataset)[70] <-paste('forceBodyAccelerationMagnitudeMeanFrequency')\nnames(dataset)[71] <-paste('forceBodyBodyAccelerationJerkMagnitudeMeanFrequency')\nnames(dataset)[72] <-paste('forceBodyBodyGyroMagnitudeMean')\nnames(dataset)[73] <-paste('forceBodyBodyGyroMagnitudeStd')\nnames(dataset)[74] <-paste('forceBodyBodyGyroJerkMagnitudeMean')\nnames(dataset)[75] <-paste('forceBodyBodyGyroJerkMagnitudeStd')\n\n\n## Step 8: Create a tidydataset for exportation, with the average of each variable for each activity and each subject.\ntidydata<-dataset%>%\n  arrange(subjectID, labels, prepost) %>%\n  group_by(subjectID, labels, prepost) %>%\n  summarise_each(funs(mean))\n\n\n\nwrite.table(tidydata, file='tidydata.txt', row.name = FALSE )\n\n",
    "created" : 1441899382148.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3956589150",
    "id" : "7B4BE608",
    "lastKnownWriteTime" : 1441901869,
    "path" : "~/Dropbox/DataScience/GettingData/GettingDataProject/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}